blueprint:
  name: Predictive Humidifier Pre-Start (AC Cooling Cycles)
  description: >
    Turns a humidifier on shortly BEFORE the next AC cooling cycle based on a learned
    cycle period. Updates period at each compressor start (hvac_action='cooling').
    Stops on VPD floor, after AC has been cooling for a bit, or on a safety timeout.
  domain: automation
  input:
    climate_entity:
      name: Climate (AC)
      selector: { entity: { domain: climate } }
    humidifier_entity:
      name: Humidifier
      selector: { entity: { domain: humidifier } }
    vpd_sensor:
      name: VPD sensor (kPa)
      selector: { entity: { domain: sensor } }
    setpoint_humidity:
      name: Target RH (%) to set on pre-start
      default: 62
      selector: { number: { min: 30, max: 90, step: 1, mode: slider } }
    vpd_start_above:
      name: Start if VPD is above (kPa)
      default: 0.60
      selector: { number: { min: 0.1, max: 2.0, step: 0.01, mode: slider } }
    vpd_stop_below:
      name: Stop if VPD drops below (kPa)
      default: 0.55
      selector: { number: { min: 0.1, max: 2.0, step: 0.01, mode: slider } }
    lead_seconds:
      name: Lead time before next cycle (seconds)
      default: 45
      selector: { number: { min: 0, max: 600, step: 1 } }
    min_cycle_minutes:
      name: Ignore cycle periods shorter than (minutes)
      default: 3
      selector: { number: { min: 1, max: 60, step: 0.5 } }
    max_cycle_minutes:
      name: Ignore cycle periods longer than (minutes)
      default: 40
      selector: { number: { min: 5, max: 180, step: 1 } }
    safety_max_on_minutes:
      name: Safety max pre-start ON time (minutes)
      default: 10
      selector: { number: { min: 1, max: 60, step: 1 } }
    helper_last_start:
      name: Helper – input_datetime (AC cycle last start)
      selector: { entity: { domain: input_datetime } }
    helper_period_min:
      name: Helper – input_number (AC cycle period in minutes)
      selector: { entity: { domain: input_number } }

mode: restart
max_exceeded: silent

variables:
  climate: !input climate_entity
  humid: !input humidifier_entity
  vpd: !input vpd_sensor
  set_rh: !input setpoint_humidity
  vpd_hi: !input vpd_start_above
  vpd_lo: !input vpd_stop_below
  lead_s: !input lead_seconds
  min_ok: !input min_cycle_minutes
  max_ok: !input max_cycle_minutes
  max_on_min: !input safety_max_on_minutes
  last_start_helper: !input helper_last_start
  period_helper: !input helper_period_min

  last_ts: >
    {{ as_timestamp(states(last_start_helper)) | float(0) }}
  period_s: >
    {{ (states(period_helper) | float(0)) * 60 }}
  next_ts: >
    {{ iif(last_ts>0 and period_s>0, last_ts + period_s, 0) }}
  prestart_window: >
    {{ next_ts>0 and
       now().timestamp() >= (next_ts - lead_s) and
       now().timestamp() < next_ts }}

trigger:
  - id: learn_cycle
    platform: state
    entity_id: !input climate_entity
    attribute: hvac_action
    to: cooling

  - id: prestart
    platform: template
    value_template: "{{ prestart_window }}"

  - id: stop_on_vpd_floor
    platform: numeric_state
    entity_id: !input vpd_sensor
    below: !input vpd_stop_below

  - id: stop_after_cooling
    platform: state
    entity_id: !input climate_entity
    attribute: hvac_action
    to: cooling
    for:
      minutes: 3

  - id: stop_safety_timeout
    platform: state
    entity_id: !input humidifier_entity
    to: "on"
    for:
      minutes: !input safety_max_on_minutes

action:
  - choose:

      # ---- Learn cycle period on each cooling start ----
      - conditions:
          - condition: trigger
            id: learn_cycle
        sequence:
          - variables:
              now_ts: "{{ now().timestamp() }}"
              last: "{{ as_timestamp(states(last_start_helper)) | float(0) }}"
              elapsed_min: "{{ (now_ts - last) / 60 if last>0 else 0 }}"
              old_period: "{{ states(period_helper) | float(0) }}"
              valid: "{{ elapsed_min>min_ok and elapsed_min<max_ok }}"
              new_period: >-
                {{ iif(old_period>0, old_period*0.8 + elapsed_min*0.2, elapsed_min) }}
          - service: input_datetime.set_datetime
            target: { entity_id: "{{ last_start_helper }}" }
            data:
              datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          - if:
              - condition: template
                value_template: "{{ valid }}"
            then:
              - service: input_number.set_value
                target: { entity_id: "{{ period_helper }}" }
                data: { value: "{{ new_period }}" }

      # ---- Pre-start humidifier just before the next cycle ----
      - conditions:
          - condition: trigger
            id: prestart
          - condition: template
            value_template: "{{ state_attr(climate,'hvac_action') in ['idle', None] }}"
          - condition: numeric_state
            entity_id: !input vpd_sensor
            above: !input vpd_start_above
        sequence:
          - service: humidifier.turn_on
            target: { entity_id: !input humidifier_entity }
          - service: humidifier.set_humidity
            target: { entity_id: !input humidifier_entity }
            data: { humidity: !input setpoint_humidity }

      # ---- Stop conditions ----
      - conditions:
          - condition: trigger
            id:
              - stop_on_vpd_floor
              - stop_after_cooling
              - stop_safety_timeout
        sequence:
          - service: humidifier.turn_off
            target: { entity_id: !input humidifier_entity }
